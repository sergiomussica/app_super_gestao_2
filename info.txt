25. Rotas (Routes) - Introdução
comandos
composer create-project --prefer-dist laravel/laravel app_super_gestao_2 "7.0.0"
api.php->registrar rotas das apis
channels.php->definição de rotas browquesting
console.php->comandos persolizados para o artisan
web->rotas internas da aplicação

27. Controllers
rota fica associada a um controlador para uma determinada acção

routes->controllers->views

Aula 30. Criação de views
Criação de controllers contacto,principal e sobre nos
Conectar os controllers às views

Aula 30.31,32 Criação de views, envio de parâmentros nas rota via função de callback
Envio de parametros na rota
importa a sequencia de parâmetros,caso o parâmetro seja opcional adicionar ?
Caso seja necessário padronizar um parâmetro no sentido direita para esquerda, informar mensagem por padrão , caso contrário o Laravel ficará perdido

Aula 34
Uso de espressões regulares para filtrar os tipo parametros na rota

Aula 35,36,37
Criação de Rotas
Agrupamento de rotas 
Dar nome a rotas e chamar rotas com base no nome nas views

Aula 38
Redirecçionamento de rotas com a função redirect e dentro de uma rota

Aula 39 
Rota de Fallback

Aula 40,41
Encaminhamento de parâmetros da rota para o controlador
Encaminhamento de parâmentros  do controlador para vizualização

Metódo with, compact e array associativo

Aula 42.43
Incluir comentários e blocos puros php
{{----}}
@php
@endphp
{{}} == <?= ?>

Aula 45,46,47,48,49,50,51,52,53,54,55
@if @else

@unless executa se a condição for false

@isset saber se variável está definida(existe ou não)

@empty variável vazia

codicao ? se verdade : se falso; operador ternario ex:isset($fornecedores[1]['cnpj']) ? 'CNPJ Informado' : 'CNPJ não informado'

?? operador condicional de valor default ex: {{ $fornecedor[0]['cnpj'] ?? ''}}

----------------------------
@switch($fornecedores[1]['ddd'])
    @case ('11')
        Sao Paulo - SP
        @break
    @case ('32')
        Fortaleza - CE
        @break
    @default
        Estado não identificado
@endswitch
----------------------------
@for($i=0; isset($fornecedores[$i]); $i++)
    {{$fornecedores[$i]['nome']}}
@endfor
----------------------------
@while(isset($fornecedores[$i]))
    $fornecedores[$i]['nome']
    @php $i++ @endphp
@endwhile
-----------------------------
@forelse($fornecedores as $indice => $fornecedor)
{{$fornecedor['nome']}}
    @empty
    Não existem fornecedores
    @endempty
@endforelse
------------------------------

Aula 56,57
@{{}}->o blade não interpreta o código

{{$loop->iteration pode}} disponível apenas para foreach e forelse
{{$loop->first}} retorna se é a primeira iteração do ciclo de repetição
{{$loop->last}} indica se é a última iteração

{{$loop->count}} retorna o número de registros


Aula 61,62,63,64,65,66,67,68,69
Template com @extends, @section, e @yield
include de views usando @include
@component 
$slot

Aula 70,78,79,80,81,82,83,84,85,86,87,88
php artisan make:model SiteContacto -m criar migration automaticamente
php artisan make: model Fornecedor
php artisan make: migration create_fornecedores_table
public function up(){
    Schema::create('fornecedores',function (Blueprint $table)){
        $table->id();
        $table->string('nome',100);
        $table->text('descricao')->nullable();
        $table->integer('peso');
        $table->float('preco_venda',8,2)-default(0.01);pode ter até 8 digitos, dois são para fracção
        $table

    };
}

php artisan make: migration alter_fornecedores_novas_colunas
public function up(){
    Schema::table('fornecedores',function (Blueprint $table)){


    };
}
public function down(){
     Schema::table('fornecedores',function (Blueprint $table)){
        $table->dropColumn(['','',''])
    };
}

php artisan migrate
php artisan migrate:rollback
php artisan migrate:rollback --step=2

Migration - Adicionando chaves estrangeira (Relacionamento um para um)
public function up(){
    Schema::table('produto_detalhes',function (Blueprint $table)){

        $table->id();
        $table->unsignedBigInteger('produto_id');

        $table->foreign('produto_id')->references('id')->on('produtos');
        $table->unique('produto_id');
    };
}

Migration - Adicionando chaves estrangeira (Relacionamento um para muitos)

public function up(){
    Schema::crate('unidades',function (Blueprint $table)){

        $table->id();
        $table->string('unidades',5);
       
    };

    //adicionar o Relacionamento com a tabela produtos
     Schema::table('produtos',function (Blueprint $table)){

        $table->unsignedBigInteger('unidade_id');
        $table->foreign('unidades_id')->references('id')->on('unidades');       
    };

     Schema::table('produto_detalhes',function (Blueprint $table)){

        $table->unsignedBigInteger('unidade_id');
        $table->foreign('unidades_id')->references('id')->on('unidades');       
    };
}

public function down(){

    //remover o Relacionamento com a tabela produto_detalhes
     Schema::table('fornecedores',function (Blueprint $table)){

        //remover aFK
        $table->dropForeign('produtos_detalhes_unidade_id_foreign');//[tabela]
        //remover a coluna unidade_id
        $table->dropColumn('unidade_id')
    };

    //remover o Relacionamento com a tabela produtos
      Schema::table('produtos',function (Blueprint $table)){

        //remover aFK
        $table->dropForeign('produtos_unidade_id_foreign');//[tabela]
        //remover a coluna unidade_id
        $table->dropColumn('unidade_id')
    };

    Schema::dropIfExists('unidades');

}
Migration - Adicionando chaves estrangeira (Relacionamento muitos para muitos)
uma tabela auxiliar entre duas tabelas que contém chaves estrangeiras de duas tabelas

Migration - Modification After -> ordenação das colunas
public function up(){
    Schema::table('fornecedores',function (Blueprint $table)){
        $table->string('site',150)->after('nome');
    };
}

Migration Status Reset Refresh Fresh
php artisan migrate:status informa migration pendentes e executadas e o batch
php artisan migrate:reset faz um roolback das migration
php artisan migrate:refresh reverter todas migrations e, em seguida executar todas migrations
php artisan migrate:fresh faz o drop de todos os obejctos da base de dados + o migrate para recriar os objectos

Aulas 90 Tinker
php artisan tinker

//inserção de registros
$contacto = new \App\SiteContacto();
$contacto->nome = 'Jorge';
$contacto->telefone = '258 876804015';
print_r($contacto->getAttributes());//imprime o objecto prenchido;
$contacto->save();

//Ajustando nome da tabela para um correcto ORM
Nome do modelo SiteContactoTeste
Nome da tabela Site_contacto_testes

Model Fornecedor
class Fornecedor extends Model{
    protected $table = 'fornecedores';
}


//inserindo registros com create e Fillable
    ::chamar método estático
    new chamar método não estático

    php artisan tinker
    \App\Fornecedor::create(['nome'=>'Fornecedor ABC', 'site'=>'fonecedor.com.br']);
    //causa erro, antes de usar o método create, é necessário adicionar os campos ao Fillable

    class Fornecedor extends Model{
        protected $table = 'fornecedores';
        protected $fillable = ['nome','site'];
    }

// seleccionando registro coM all()
use \App\Fornecedor;
$fornecedores = Fornecedor::all();
print_r($fornecedores->toArray());

foreach($fornecedores as $f){echo $f->nome; echo ' - ';}

//seleccionar com find()
$fornecedores2 = Fornecedor::find(2);
$fornecedores2 = Fornecedor::find([2,5,6]);

//seleccionar com where
$fornecedores = Fornecedor::where('nome_coluna','operador_comparacao','valor');
$fornecedores = Fornecedor::where('id','>','1')->get();
//96

Aulas 106,107 Collection first, last e reverse
$contactos = Sitecontacto::where('id', '>', 3)->get()-first();
$contactos = Sitecontacto::where('id', '>', 3)->get()-last();
$contactos = Sitecontacto::where('id', '>', 3)->get()-reverse();
 
Aulas 108 Collection toArray() e toJason()

Aulas 109 Collection pluck
$contactos = Sitecontacto::all()->pluck('email'); //devolve apenas deteminados campos da colecção de dados

114
$contacto->delete();
SiteContacto::where('id',7)->delete();
SiteContacto::destroy(5);

115 softDeletes
    na model use Illuminate\Database\SoftDeletes;

    class Fornecedor extends Model{
        use SoftDeletes
    }

    na migration
    public function up(){
    Schema::create('fornecedores',function (Blueprint $table)){
        $table->softDelete();
    };
    $fornecedor->delete(); usa softDelete
    $fornecedor->forceDelete();


117,118 Seeder
php artisan make:seeder FornecedorSeeder

        //FornecedorSeeder
        public void run(){
            $fornecedor = new Fornecedor();
            $fornecedor->nome= 'shlgs';
            $fornecedor->save();

            //apenas funciona se os parâmentros estiverem definidos no fillable
            Fornecedor::create([
                'nome' => 'Fornecedor 200'
            ]);

            //insert
            DB::table('fornecedores')->insert([
                'nome' => 'Fornecedor 200'
            ]);

        }

        //DatabaseSeeder
        public void run(){
            $this->call(FornecedorSeeder::class);
        }
php artisan db:seed
php artisan db:seed --class=FornecedorSeeder //para executar apenas uma classe seeder

119 Factories
github.com/fzaninotto/faker documentation
php artisan make:factory SiteContactoFactory --model=SiteContacto

120
$request->all();//recurpe todo conteudo
$request->input('nome');//recupera o parâmetro





















    





























